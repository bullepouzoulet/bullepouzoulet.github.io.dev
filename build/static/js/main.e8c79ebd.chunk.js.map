{"version":3,"sources":["commons/icons/Menu.tsx","components/AppHeader.tsx","components/home/Home.tsx","components/services/Services.tsx","components/projects/Projects.tsx","components/contact/Contact.tsx","components/AppContent.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["Menu","className","React","Component","AppHeader","this","props","links","map","renderLink","link","to","text","active","key","renderLinks","Home","Services","Projects","Contact","AppContent","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAkBeA,G,uLAVX,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,kB,GANJC,IAAMC,YC+DVC,G,4LA/CX,OAAOC,KAAKC,MAAMC,MAAMC,IAAIH,KAAKI,c,iCAGvBC,GAAsB,IAE9BC,EAGED,EAHFC,GACAC,EAEEF,EAFFE,KAGEX,EAAY,iBAIhB,OALIS,EADFG,SAIAZ,GAAa,0BAGb,yBACEa,IAAKH,EACLV,UAAU,kBACV,kBAAC,IAAD,CACEA,UAAWA,EACXU,GAAIA,GACHC,M,+BAOP,OACE,4BAAQX,UAAU,aAChB,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CACEA,UAAU,iBACVU,GAAG,KAFL,wBAMF,yBAAKV,UAAU,mBACXI,KAAKU,eAET,4BAAQd,UAAU,kBAChB,kBAAC,EAAD,Y,GA1CcC,IAAMC,Y,QCAfa,G,uLAXX,OACE,yBAAKf,UAAU,QACb,yBAAKA,UAAU,0BACf,2CAAgB,6BAAhB,YACA,gFACA,sF,GAPWC,IAAMC,YCUVc,G,uLARX,OACE,yBAAKhB,UAAU,YACb,6C,GAJeC,IAAMC,YCUde,G,uLARX,OACE,yBAAKjB,UAAU,YACb,6C,GAJeC,IAAMC,YCUdgB,G,uLARX,OACE,yBAAKlB,UAAU,WACb,4C,GAJcC,IAAMC,YCgCbiB,E,iLArBX,OACE,yBAAKnB,UAAU,cACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,a,GAfanB,IAAMC,WCHzBI,EAAQ,CACZ,CAAEI,GAAI,IAAKC,KAAM,OAAQC,QAAQ,GACjC,CAAEF,GAAI,YAAaC,KAAM,WAAYC,QAAQ,GAC7C,CAAEF,GAAI,YAAaC,KAAM,WAAYC,QAAQ,GAC7C,CAAEF,GAAI,WAAYC,KAAM,UAAWC,QAAQ,IAgB9BS,E,iLAXX,OACE,kBAAC,IAAD,KACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,CAAWM,MAAOA,IAClB,kBAAC,EAAD,Y,GANQL,IAAMC,WCNJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e8c79ebd.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Menu.css'\r\n\r\ninterface MenuProps {}\r\ninterface MenuState {}\r\n\r\nclass Menu extends React.Component<MenuProps, MenuState> {\r\n  render () {\r\n    return (\r\n      <div className='Menu'>\r\n        <div className='Menu-bar' />\r\n        <div className='Menu-bar' />\r\n        <div className='Menu-bar' />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Menu from '../commons/icons/Menu'\r\n\r\n\r\nimport './_app.css'\r\n\r\ninterface AppHeaderLink {\r\n  to: string,\r\n  text: string,\r\n  active: boolean\r\n}\r\n\r\ninterface AppHeaderProps {\r\n  links: AppHeaderLink[]\r\n}\r\n\r\ninterface AppHeaderState {}\r\n\r\nclass AppHeader extends React.Component<AppHeaderProps, AppHeaderState> {\r\n  renderLinks () {\r\n    return this.props.links.map(this.renderLink)\r\n  }\r\n\r\n  renderLink (link: AppHeaderLink) {\r\n    const {\r\n      to,\r\n      text,\r\n      active\r\n    } = link\r\n    let className = 'AppHeader-link'\r\n    if (active) {\r\n      className += ' AppHeader-link-active'\r\n    }\r\n    return (\r\n      <div\r\n        key={to}\r\n        className='AppHeader-item'>\r\n        <Link\r\n          className={className}\r\n          to={to}>\r\n          {text}\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header className='AppHeader'>\r\n        <div className='AppHeader-item'>\r\n          <Link\r\n            className='AppHeader-link'\r\n            to='/'>\r\n            Sustainable Systems\r\n          </Link>\r\n        </div>\r\n        <div className='AppHeader-links'>\r\n          { this.renderLinks() }\r\n        </div>\r\n        <button className='AppHeader-menu'>\r\n          <Menu />\r\n        </button>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppHeader\r\n","import React from 'react'\r\n\r\nimport './Home.css'\r\n\r\ninterface HomeProps {}\r\ninterface HomeState {}\r\n\r\nclass Home extends React.Component<HomeProps, HomeState> {\r\n  render () {\r\n    return (\r\n      <div className='Home'>\r\n        <div className='AppContent-background' />\r\n        <h1>Sustainable <br /> Systems</h1>\r\n        <h2>Let's walk together towards a sustainable future</h2>\r\n        <h3>Site under construction - release planned 01/2020</h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nimport './Services.css'\r\n\r\ninterface ServicesProps {}\r\ninterface ServicesState {}\r\n\r\nclass Services extends React.Component<ServicesProps, ServicesState> {\r\n  render () {\r\n    return (\r\n      <div className='Services'>\r\n        <h1>Services</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Services\r\n","import React from 'react'\r\n\r\nimport './Projects.css'\r\n\r\ninterface ProjectsProps {}\r\ninterface ProjectsState {}\r\n\r\nclass Projects extends React.Component<ProjectsProps, ProjectsState> {\r\n  render () {\r\n    return (\r\n      <div className='Projects'>\r\n        <h1>Projects</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Projects\r\n","import React from 'react'\r\n\r\nimport './Contact.css'\r\n\r\ninterface ContactProps {}\r\ninterface ContactState {}\r\n\r\nclass Contact extends React.Component<ContactProps, ContactState> {\r\n  render () {\r\n    return (\r\n      <div className='Contact'>\r\n        <h1>Contact</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport {\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom'\r\n\r\nimport Home from './home/Home'\r\nimport Services from './services/Services'\r\nimport Projects from './projects/Projects'\r\nimport Contact from './contact/Contact'\r\n\r\nimport './_app.css'\r\n\r\ninterface AppContentProps {}\r\ninterface AppContentState {}\r\n\r\nclass AppContent extends React.Component<AppContentProps, AppContentState> {\r\n  render () {\r\n    return (\r\n      <div className='AppContent'>\r\n        <Switch>\r\n          <Route path='/services'>\r\n            <Services />\r\n          </Route>\r\n          <Route path='/projects'>\r\n            <Projects />\r\n          </Route>\r\n          <Route path='/contact'>\r\n            <Contact />\r\n          </Route>\r\n          <Route path='/'>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppContent\r\n","import React from 'react'\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom'\n\nimport AppHeader from './AppHeader'\nimport AppContent from './AppContent'\n\nimport './_app.css'\n\ninterface AppProps {}\ninterface AppState {}\n\nconst links = [\n  { to: '/', text: 'Home', active: false },\n  { to: '/services', text: 'Services', active: false },\n  { to: '/projects', text: 'Projects', active: false },\n  { to: '/contact', text: 'Contact', active: false }\n]\n\nclass App extends React.Component<AppProps, AppState> {\n  render () {\n    return (\n      <Router>\n        <div className='App'>\n          <AppHeader links={links} />\n          <AppContent />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","/* globals fetch */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}